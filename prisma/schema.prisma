generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InteractionType {
  Like
  Deslike
  Laugh
  Surprise
}

enum Role {
  Default
  Admin
}

model Post {
  id        String   @id @default(uuid())
  content   String
  profileId String
  createdAt DateTime @default(now())

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model AdvancedPost {
  id        String   @id @default(uuid())
  content   String
  profileId String
  createdAt DateTime @default(now())

  interactions Interaction[]
  profile      Profile       @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Interaction {
  id             String          @id @default(uuid())
  type           InteractionType
  advancedPostId String
  authorId       String

  advancedPost AdvancedPost @relation(fields: [advancedPostId], references: [id], onDelete: Cascade)
  author       Profile      @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Profile {
  id          String   @id @default(uuid())
  username    String   @unique
  name        String
  icon        String
  password    String
  role        Role
  isActivated Boolean  @default(true)
  createdAt   DateTime @default(now())

  posts            Post[]
  advancedPosts    AdvancedPost[]
  interactions     Interaction[]
  sentRequests     ProfileFriendship[] @relation("sentRequests")
  receivedRequests ProfileFriendship[] @relation("receivedRequests")
}

model ProfileFriendship {
  profileId String
  friendId  String
  createAt  DateTime @default(now())

  profile Profile @relation("sentRequests", fields: [profileId], references: [id], onDelete: Cascade)
  friend  Profile @relation("receivedRequests", fields: [friendId], references: [id], onDelete: Cascade)

  @@id([profileId, friendId])
}
